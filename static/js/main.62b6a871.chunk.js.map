{"version":3,"sources":["data.js","components/CountryButton.js","components/RateDisplay.js","components/countryForm.js","App.js","serviceWorker.js","index.js"],"names":["countryData","country","code","currency","type","imageCode","symbol","CountryButton","className","map","countries","props","addCountry","currentCountry","key","onClick","Component","RateDisplay","numberWithCommas","x","toString","replace","this","amount","updateAmount","calculated","filteredCountry","filter","item","console","log","src","alt","class","value","onChange","App","setState","calculateExchange","getDate","date","moment","Date","now","format","getExchangeData","fetch","then","res","json","data","exchangeRates","rates","e","target","handleChange","event","rate","state","toFixed","bind","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62b6a871.chunk.js","sourcesContent":["export const countryData = [\r\n    {\r\n        country: \"Hong Kong\",\r\n        code: \"HKD\",\r\n        currency: \"Dollars\",\r\n        type: \"Hong Kong\",\r\n        imageCode: \"HK\",\r\n        symbol: \"$\",\r\n\r\n    },\r\n    {\r\n        country: \"United Kingdom\",\r\n        code: \"GBP\",\r\n        currency: \"Pounds\",\r\n        type: \"British\",\r\n        imageCode: \"GB\",\r\n        symbol: \"£\",\r\n    },\r\n    {\r\n        country: \"Japan\",\r\n        code: \"JPY\",\r\n        currency: \"Yen\",\r\n        type: \"Japanese\",\r\n        imageCode: \"JP\",\r\n        symbol: \"¥\",\r\n    },\r\n    {\r\n        country: \"Thailand\",\r\n        code: \"THB\",\r\n        currency: \"Baht\",\r\n        type: \"Thai\",\r\n        imageCode: \"TH\",\r\n        symbol: \"฿\",\r\n    },\r\n    {\r\n        country: \"India\",\r\n        code: \"INR\",\r\n        currency: \"Rupees\",\r\n        type: \"Indian\",\r\n        imageCode: \"IN\",\r\n        symbol: \"₹\",\r\n    },\r\n    {\r\n        country: \"European Union\",\r\n        code: \"EUR\",\r\n        currency: \"Euro\",\r\n        type: \"European\",\r\n        imageCode: \"EU\",\r\n        symbol: \"€\",\r\n    },\r\n    {\r\n        country: \"Australia\",\r\n        code: \"AUD\",\r\n        currency: \"Dollars\",\r\n        type: \"Australian\",\r\n        imageCode: \"AU\",\r\n        symbol: \"$\",\r\n    },\r\n    {\r\n        country: \"Canada\",\r\n        code: \"CAD\",\r\n        currency: \"Dollars\",\r\n        type: \"Canadian\",\r\n        imageCode: \"CA\",\r\n        symbol: \"$\",\r\n    }\r\n\r\n]","import React, { Component } from 'react';\r\nimport { countryData } from '../data';\r\n\r\nexport default class CountryButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"buttonContainer\">\r\n                {countryData.map(countries => {\r\n                    const { country, code, currency, type } = countries\r\n                    const { addCountry, currentCountry } = this.props;\r\n                    return (\r\n                        <div \r\n                            key={code}\r\n                            onClick={() => addCountry(code)}\r\n                            className={currentCountry === code ? \"selected country\" : \"country\"}>\r\n                            <p className=\"countryName\">{country}</p>\r\n                            <small>{code}</small>\r\n                            <p>{type} {currency}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { countryData } from '../data';\r\n \r\nexport default class RateDisplay extends Component {\r\n\r\n    numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    render() {\r\n        const { currentCountry, amount, updateAmount, calculated } = this.props\r\n        const filteredCountry = countryData.filter(item => item.code === currentCountry);\r\n        const { code, country, currency, type, imageCode, symbol } = filteredCountry[0];\r\n        console.log(filteredCountry)\r\n        return (\r\n            <div className=\"rateContainer\">\r\n                <h2>You are converting from USD to {code}</h2>\r\n                <div className=\"rateDisplay\">\r\n                    <div className=\"unitedStates\">\r\n                        <h2>United States</h2>\r\n                        <p>USD</p>\r\n                        <img src=\"https://www.countryflags.io/us/flat/64.png\" alt=\"United States Flag\" />\r\n                        <div class=\"input-icon\">\r\n                            <input type=\"number\" value={amount} onChange={updateAmount} />\r\n                            <i>$</i>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h2>{country}</h2>\r\n                        <p>{code}</p>\r\n                        <img src={`https://www.countryflags.io/${imageCode}/flat/64.png`} alt={country + \" flag\"} />\r\n                        <div class=\"input-icon\">\r\n                            <h3 className=\"amount\" >{this.numberWithCommas(calculated)}</h3>\r\n                            <i>{symbol}</i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { countryData } from '../data';\r\n\r\nexport default class countryForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(event.target.value)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n               <form>\r\n               <select \r\n                    name=\"countries\" \r\n                    id=\"countries\" \r\n                    value={this.props.currentCountry}\r\n                    onChange={this.props.handleChange}\r\n                    form=\"countryForm\">\r\n                    {countryData.map(countries => {\r\n                        const { country, code, currency, type } = countries\r\n                        return (\r\n                            <option selected={this.props.currentCountry === code ? true : false} key={code} value={code}>{code} - {type} {currency}</option>\r\n                        )\r\n                    })}\r\n                </select>\r\n               </form> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport moment from 'moment';\nimport CountryButton from './components/CountryButton';\nimport CountryForm from './components/countryForm';\nimport RateDisplay from './components/RateDisplay';\nimport './App.scss';\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      date: '',\n      currentCountry: 'CAD',\n      exchangeRates: {},\n      amount: 100,\n      calculated: 0,\n\n    }\n    this.addCountry = this.addCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.updateAmount = this.updateAmount.bind(this);\n\n  }\n\n  componentDidMount() {\n      this.getDate();\n      this.getExchangeData();\n  }\n\n  addCountry = (country) => {\n    this.setState({ currentCountry: country}, () => {\n      this.calculateExchange();\n    });\n  }\n\n  getDate = () => {\n    this.setState({ date: moment(Date.now()).format('MMMM Do, YYYY')})\n  }\n\n  getExchangeData = () => {\n    fetch(\"https://api.exchangeratesapi.io/latest?base=USD\")\n    .then(res => res.json())\n    .then(data => {\n      this.setState({ exchangeRates: data.rates }, () => {\n        this.calculateExchange();\n      })\n    })\n  }\n\n  updateAmount = (e) => {\n    this.setState({ amount: e.target.value}, () => {\n      this.calculateExchange();\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({currentCountry: event.target.value});\n  }\n\n  calculateExchange = () => {\n    const rate = this.state.exchangeRates[this.state.currentCountry];\n    this.setState({ calculated: (rate * this.state.amount).toFixed(2) })\n}\n\n  render() {\n    return (\n      <div>\n        <h1>Currency Exchange</h1>\n        <p>{this.state.date}</p>\n        {/* <CountryForm handleChange={this.handleChange}/> */}\n        <CountryButton \n          addCountry={this.addCountry} \n          currentCountry={this.state.currentCountry} />\n        <RateDisplay \n          updateAmount={this.updateAmount} \n          amount={this.state.amount} \n          currentCountry={this.state.currentCountry} \n          calculated={this.state.calculated}\n          exchangeRates={this.state.exchangeRates} />\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}